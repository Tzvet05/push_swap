Notes : tous les pre-tris etendent la pile des pivots/medianes
quand quicksort de A->B: push < (plus petits) que le pivot
quand quicksort de B->A: push > (plus grands) que le pivot
stocker medianes dans une pile (linked list)
toujours push les medianes dans l'autre stack (puisqu'elles delimitent les partitions)



tant que stack B n'est pas vide:
	B: si <= 3 elements entre deb et mediane du haut de la pile
		B: push vers A et sort du plus petit au plus grand
		pop la pile des medianes
	B: sinon
		B: push vers A un pre-tri quicksort de deb a mediane du haut de la pile (push les + grands)
		A: pre-tri des elements qui viennent d'etre push (donc du debut de a a la mediane du haut de la pile) et garder les 3 plus grands et les trier



quicksort : deb (haut de la stack), stack de pivots (medianes)
tant que plus de 0 elements entre deb et pivot du haut de sa stack:
	tant que plus de 3 elements entre deb et pivot du haut de sa stack:
		empiler la mediane sur la stack de pivots
		continue
	push tous les elements de deb a pivot du haut de sa stack sur l'autre stack
	deb = mediane du haut de sa stack
	depiler stack des pivots



a prioritaire :
implementation :
	toujours trier A autant que possible en priorité de maniere a ne plus avoir que les 3 + grands pour pouvoir les trier definitivement
	suite de rx ou rrx pour parcourir partition
		opti possible : continuer de rx ou rrx que si le reste de la partition contient des valeurs qui seront push



sort complet :
	suite de rx ou rrx pour parcourir partition
		opti possible : continuer de rx ou rrx que si le reste de la partition contient des valeurs qui seront push



problemes:
	comment savoir a quelle mediane le quicksort doit s'arreter ?
		-en sauvegardant celle du haut de sa pile au debut du quicksort
	comment savoir si rx ou rrx dans la partition a venir?
		-



stocker longueurs des partitions plutots que pivots, dans 2 listes separees (une par stack)
trier a en priorite
une partition est decoupee de maniere a ce que le premiere moitie contienne autant ou 1 element de plus que la deuxieme
> fonction qui recupere la longueur de la partition actuelle, la remplace par floor(len_part / 2), et ajoute len_part - floor(len_part / 2) a l'autre liste de partitions
> fonction qui recupere l'element median dans une partition
>> il n'y a pas besoin d'alterner entre rx et rrx, juste revenir tt en haut a chaque fois (ca a le meme coût)

47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
NULL
48 ; 0

47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
24 ; 24

47 46 45 44 43 42 41 40 39 38 37 36
24 25 26 27 28 29 30 31 32 33 34 35|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
12 ; 12, 24

47 46 45 44 43 42
36 37 38 39 40 41|24 25 26 27 28 29 30 31 32 33 34 35|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
6 ; 6, 12, 24

47 46 45
42 43 44|36 37 38 39 40 41|24 25 26 27 28 29 30 31 32 33 34 35|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
3 ; 3, 6, 12, 24

45 46 47
42 43 44|36 37 38 39 40 41|24 25 26 27 28 29 30 31 32 33 34 35|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
0 ; 3, 6, 12, 24

44 43 42|45 46 47
36 37 38 39 40 41|24 25 26 27 28 29 30 31 32 33 34 35|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
3 ; 6, 12, 24

42 43 44 45 46 47
36 37 38 39 40 41|24 25 26 27 28 29 30 31 32 33 34 35|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
0 ; 6, 12, 24

41 40 39|42 43 44 45 46 47
36 37 38|24 25 26 27 28 29 30 31 32 33 34 35|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
3 ; 3, 12, 24

39 40 41 42 43 44 45 46 47
36 37 38|24 25 26 27 28 29 30 31 32 33 34 35|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
0 ; 3, 12, 24

38 37 36|39 40 41 42 43 44 45 46 47
24 25 26 27 28 29 30 31 32 33 34 35|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
3 ; 12, 24

36 37 38 39 40 41 42 43 44 45 46 47
24 25 26 27 28 29 30 31 32 33 34 35|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
0 ; 12, 24

35 34 33 32 31 30|36 37 38 39 40 41 42 43 44 45 46 47
24 25 26 27 28 29|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
6 ; 6, 12, 24

35 34 33|36 37 38 39 40 41 42 43 44 45 46 47
30 31 32|24 25 26 27 28 29|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
3 ; 3, 6, 12, 24

33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
30 31 32|24 25 26 27 28 29|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
0 ; 3, 6, 12, 24

32 31 30|33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
24 25 26 27 28 29|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
3 ; 6, 12, 24

30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
24 25 26 27 28 29|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
0 ; 6, 12, 24

30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
24 25 26 27 28 29|0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
0 ; 6, 12, 24










47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
NULL
NULL

47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
23

47 46 45 44 43 42 41 40 39 38 37 36
24 25 26 27 28 29 30 31 32 33 34 35|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
35, 23

47 46 45 44 43 42
36 37 38 39 40 41|24 25 26 27 28 29 30 31 32 33 34 35|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
41, 35, 23

47 46 45
42 43 44|36 37 38 39 40 41|24 25 26 27 28 29 30 31 32 33 34 35|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
44, 41, 35, 23

45 46 47
42 43 44|36 37 38 39 40 41|24 25 26 27 28 29 30 31 32 33 34 35|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
44, 41, 35, 23

44 43 42|45 46 47
36 37 38 39 40 41|24 25 26 27 28 29 30 31 32 33 34 35|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
44, 41, 35, 23

42 43 44 45 46 47
36 37 38 39 40 41|24 25 26 27 28 29 30 31 32 33 34 35|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
41, 35, 23 -> pop 44

41 40 39|42 43 44 45 46 47
36 37 38|24 25 26 27 28 29 30 31 32 33 34 35|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
38, 41, 35, 23

39 40 41 42 43 44 45 46 47
36 37 38|24 25 26 27 28 29 30 31 32 33 34 35|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
38, 35, 23 -> pop 41

38 37 36|39 40 41 42 43 44 45 46 47
24 25 26 27 28 29 30 31 32 33 34 35|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
38, 35, 23

36 37 38 39 40 41 42 43 44 45 46 47
24 25 26 27 28 29 30 31 32 33 34 35|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
35, 23 -> pop 38



30 31 32 33 34 35|36 37 38 39 40 41 42 43 44 45 46 47
29 28 27 26 25 24|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
30, 35, 23

33 34 35|36 37 38 39 40 41 42 43 44 45 46 47
32 31 30|29 28 27 26 25 24|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
32, 30, 35, 23

33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
32 31 30|29 28 27 26 25 24|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
32, 30, 35, 23 -> pas pop 35 car delimite partition plus grande que 3 pas encore entierement triee (12 de long)


30 31 32|33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
29 28 27 26 25 24|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
32, 30, 35, 23

30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
29 28 27 26 25 24|23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
35, 23 -> pop 32 & 30 (penser a bien pop pivotss precedents presents dans les partitions inferieures)





9 8 7 6 5 4 3 2 1 ; NULL
NULL

9 8 7 6 5 ; 5 (added '5')
1 2 3 4

9 8 7 ; 7,5 (added '7')
6 5|1 2 3 4

7 8 9 ; 5 (popped '7')
6 5|1 2 3 4

5 6|7 8 9 ; NULL (popped '5')
1 2 3 4

5 6 7 8 9 ; 2 (added '2')
4 3|5 6 7 8 9
1 2

3 4 5 6 7 8 9 ; NULL (popped '2')
1 2

2 1 3 4 5 6 7 8 9 ; NULL
NULL

1 2 3 4 5 6 7 8 9 ; NULL
NULL



48
0

24
24

12
12 24

6
6 12 24

3
3 6 12 24

T3
3 6 12 24

3 T3
6 12 24

T6
6 12 24

3 T6
3 12 24

T9
3 12 24

3 T9
12 24

T12
12 24

6 T12		3 6 T12
6 24		3 T12

3 T12		6 T12
3 6 24		3 3 12

T15		3 T12
3 6 24		3 3 3 12

T18		T15
6 24		3 3 3 12

3 T18		3 T18
3 24		3 3 12

T21		T21
3 24		3 3 12

3 T21
24

T24
24

12 T24
12

6 T24
6 12

3 T24
3 6 12

T27
3 6 12

3 T27
6 12

T30
6 12

3 T30
3 12

T33
3 12

3 T33
12

T36
12

6 T36
6

3 T36
3 6

T39
3 6

3 T39
6

T42
6

3 T42
3

T45
3

3 T45
0

T48
0
